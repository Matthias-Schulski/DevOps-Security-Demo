name: CI/CD

on:
  push:
    branches: [ "main" ] # Deze regel zorgt ervoor dat de pipeline alleen op de main branch draait

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/student-app:latest

  test:
    name: Test
    needs: [ build ] # <-- Wacht tot de 'build' job klaar is
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run container and perform a basic test
        run: |
          docker run -d --name student-app-test -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/student-app:latest
          
          # Wacht tot de applicatie reageert (health check)
          echo "Wachten op de applicatie..."
          timeout=60
          while ! curl -s --fail http://localhost:8080 > /dev/null; do
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "Applicatie startte niet op tijd."
              docker logs student-app-test
              exit 1
            fi
            sleep 5
          done
          
          echo "Applicatie is online! Test wordt uitgevoerd."
          curl http://localhost:8080
          docker stop student-app-test

  deploy:
    name: Deploy
    needs: [ test ] # <-- Wacht tot de 'test' job klaar is
    runs-on: self-hosted
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Deploy to Kubernetes
        run: |
          sudo k3s kubectl apply -f ${{ github.workspace }}/kubernetes/deployment.yaml
          sudo k3s kubectl apply -f ${{ github.workspace }}/kubernetes/nginx-service.yaml

